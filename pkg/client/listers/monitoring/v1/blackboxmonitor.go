// Copyright 2018 The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/coreos/prometheus-operator/pkg/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BlackboxMonitorLister helps list BlackboxMonitors.
type BlackboxMonitorLister interface {
	// List lists all BlackboxMonitors in the indexer.
	List(selector labels.Selector) (ret []*v1.BlackboxMonitor, err error)
	// BlackboxMonitors returns an object that can list and get BlackboxMonitors.
	BlackboxMonitors(namespace string) BlackboxMonitorNamespaceLister
	BlackboxMonitorListerExpansion
}

// blackboxMonitorLister implements the BlackboxMonitorLister interface.
type blackboxMonitorLister struct {
	indexer cache.Indexer
}

// NewBlackboxMonitorLister returns a new BlackboxMonitorLister.
func NewBlackboxMonitorLister(indexer cache.Indexer) BlackboxMonitorLister {
	return &blackboxMonitorLister{indexer: indexer}
}

// List lists all BlackboxMonitors in the indexer.
func (s *blackboxMonitorLister) List(selector labels.Selector) (ret []*v1.BlackboxMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BlackboxMonitor))
	})
	return ret, err
}

// BlackboxMonitors returns an object that can list and get BlackboxMonitors.
func (s *blackboxMonitorLister) BlackboxMonitors(namespace string) BlackboxMonitorNamespaceLister {
	return blackboxMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlackboxMonitorNamespaceLister helps list and get BlackboxMonitors.
type BlackboxMonitorNamespaceLister interface {
	// List lists all BlackboxMonitors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.BlackboxMonitor, err error)
	// Get retrieves the BlackboxMonitor from the indexer for a given namespace and name.
	Get(name string) (*v1.BlackboxMonitor, error)
	BlackboxMonitorNamespaceListerExpansion
}

// blackboxMonitorNamespaceLister implements the BlackboxMonitorNamespaceLister
// interface.
type blackboxMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BlackboxMonitors in the indexer for a given namespace.
func (s blackboxMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1.BlackboxMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BlackboxMonitor))
	})
	return ret, err
}

// Get retrieves the BlackboxMonitor from the indexer for a given namespace and name.
func (s blackboxMonitorNamespaceLister) Get(name string) (*v1.BlackboxMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("blackboxmonitor"), name)
	}
	return obj.(*v1.BlackboxMonitor), nil
}
