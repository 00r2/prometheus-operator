## Alertmanager configuration directives
## Ref: https://prometheus.io/docs/alerting/configuration/
##
config:
  global:
    resolve_timeout: 5m
  route:
    group_by: ['job']
    group_wait: 30s
    group_interval: 5m
    repeat_interval: 12h
    receiver: 'null'
    routes:
    - match:
        alertname: DeadMansSwitch
      receiver: 'null'
  receivers:
  - name: 'null'

## Alertmanager template files to include
#
templateFiles: {}
#
# An example template:
#   template_1.tmpl: |-
#       {{ define "cluster" }}{{ .ExternalURL | reReplaceAll ".*alertmanager\\.(.*)" "$1" }}{{ end }}
#
#       {{ define "slack.myorg.text" }}
#       {{- $root := . -}}
#       {{ range .Alerts }}
#         *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
#         *Cluster:*  {{ template "cluster" $root }}
#         *Description:* {{ .Annotations.description }}
#         *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
#         *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
#         *Details:*
#           {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
#           {{ end }}

## External URL at which Alertmanager will be reachable
##
externalUrl: ""

## If true, create a serviceMonitor for alertmanager
##
selfServiceMonitor: true

## Alertmanager container image
##
image:
  repository: quay.io/prometheus/alertmanager
  tag: v0.9.1

## Labels to be added to the Alertmanager
##
labels: {}

ingress:
  ## If true, Alertmanager Ingress will be created
  ##
  enabled: false

  ## Annotations for Alertmanager Ingress
  ##
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  ## Labels to be added to the Ingress
  ##
  labels: {}

  fqdn: ""

  ## TLS configuration for Alertmanager Ingress
  ## Secret must be manually created in the namespace
  ##
  tls: []
    # - secretName: alertmanager-general-tls
    #   hosts:
    #     - alertmanager.example.com

## Node labels for Alertmanager pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## If true, the Operator won't process any Alertmanager configuration changes
##
paused: false

## Number of Alertmanager replicas desired
##
replicaCount: 1

## Resource limits & requests
## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
  # requests:
  #   memory: 400Mi

service:
  ## Annotations to be added to the Service
  ##
  annotations: {}

  ## Cluster-internal IP address for Alertmanager Service
  ##
  clusterIP: ""

  ## List of external IP addresses at which the Alertmanager Service will be available
  ##
  externalIPs: []

  ## Labels to be added to the Service
  ##
  labels: {}

  ## External IP address to assign to Alertmanager Service
  ## Only used if service.type is 'LoadBalancer' and supported by cloud provider
  ##
  loadBalancerIP: ""

  ## List of client IPs allowed to access Alertmanager Service
  ## Only used if service.type is 'LoadBalancer' and supported by cloud provider
  ##
  loadBalancerSourceRanges: []

  ## Port to expose on each node
  ## Only used if service.type is 'NodePort'
  ##
  nodePort: 30903

  ## Service type
  ##
  type: ClusterIP

## If true, create & use RBAC resources
##
rbacEnable: true

## Alertmanager StorageSpec for persistent data
## Ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/user-guides/storage.md
##
storageSpec: {}
#   volumeClaimTemplate:
#     spec:
#       resources:
#         requests:
#           storage: 50Gi
#   selector: {}
# WARNING: Don't change this file after this lines, it's automatically appended by helm/hack/sync_kube_prometheus.py
ruleFiles:
  alertmanager.rules: |-
    groups:
    - name: alertmanager.rules
      rules:
      - alert: AlertmanagerConfigInconsistent
        expr: count_values("config_hash", alertmanager_config_hash) BY (service) / ON(service)
          GROUP_LEFT() label_replace(prometheus_operator_alertmanager_spec_replicas, "service",
          "alertmanager-$1", "alertmanager", "(.*)") != 1
        for: 5m
        labels:
          severity: critical
        annotations:
          description: The configuration of the instances of the Alertmanager cluster
            `{{$labels.service}}` are out of sync.
      - alert: AlertmanagerDownOrMissing
        expr: label_replace(prometheus_operator_alertmanager_spec_replicas, "job", "alertmanager-$1",
          "alertmanager", "(.*)") / ON(job) GROUP_RIGHT() sum(up) BY (job) != 1
        for: 5m
        labels:
          severity: warning
        annotations:
          description: An unexpected number of Alertmanagers are scraped or Alertmanagers
            disappeared from discovery.
      - alert: AlertmanagerFailedReload
        expr: alertmanager_config_last_reload_successful == 0
        for: 10m
        labels:
          severity: warning
        annotations:
          description: Reloading Alertmanager's configuration has failed for {{ $labels.namespace
            }}/{{ $labels.pod}}.
